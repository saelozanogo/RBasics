knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/santiago/Documents/Progrmación en R/2020-I/PR08-Data Frames")
setwd("C:/Users/santiago/Documents/Progrmación en R/2020-I/PR08-Data Frames")
worms <- read.table("worms.txt",header = T,dec = ".")
new <- worms[rev(order(Worm.density)),]
attach(worms)
new <- worms[rev(order(Worm.density)),]
new[!duplicated(new$Vegetation),]
worms[order(Vegetation,-Worm.density),]
worms[order(-rank(Vegetation),-Worm.density),]
names(worms)
grep("S",names(worms))
worms[,grep("S",names(worms))]
worms2 <- read.table("worms.txt",header = T,dec = ".",row.names = 1)
worms2
table(y)
y <- rpois(1500,1.5)
y <- rpois(1500,1.5)
table(y)
short<-as.data.frame(table(y))
short
index<-rep(1:8,short$Freq)
index
knitr::opts_chunk$set(echo = TRUE)
data(mtcars)
mtcars
attach(mtcars)
class(am)
mtcars[am==1]
mtcars[am==1,]
data("iris")
iris
table(Species)
attach(iris)
table(Species)
attach(worms)
names(worms)
View(worms)
Damp==TRUE
median(Worm.density)
Worm.density > median(Worm.density) & Soil.pH < 5.2
attributes(worms)
data <- read.table("worms.missing.txt",header = T,dec = ".")
data
data[is.na(data)] <- 0
data
duplicated(new$Vegetation)
new <- worms[rev(order(Worm.density)),]
View(new)
duplicated(new$Vegetation)
View(new)
rank(Soil.pH)
Soil.pH
worms2 <- read.table("worms.txt",header = T,dec = ".",row.names = 1)
View(worms2)
rpois(1500,1.5)
index<-rep(1:8,short$Freq)
hist(index)
######Funciones#######
Hola <- function(nombre) {
cat("Hola,","Bienvenido",nombre)
}
Hola("Santiago")
Hola("Fulanito")
hello <- function(name) {
# Converte el nombre a may?scula
name <- toupper(name)
cat("Hello",name,"!")
}
hello("Andres")
Mul <- function(a,b){
n <- a*b
print(n)
}
Mul(2,4)
Mul1 <- function(a,b){
n <- a*b
return(n)
}
x <- Mul
x <- Mul1(2,4)
main <- function() {
w <- 5
s <- 8
t <- Mul1(w,s)
cat("El valor es", t)
}
main()
main()
main()
prime <- function(n){
rv = TRUE
for (i in 2:(n-1)){
if(n %% i == 0){
rv = FALSE
break
}
}
return(rv)
}
prime(4)
prime(1243)
prime(9389381)
x <- prime(58349787)
x
for (j in 2:100){
cat(j,prime(j),"\n")
}
primo <- function(N){
for (f in (3:N)){
if (prime(f) == TRUE){
cat(f,"Es primo","\n")
} else {
cat(f,"No es primo","\n")
}
}
}
primo(13)
absolut <- function(x){
if (x < 0){
return(-1*x)
} else {
return(x)
}
}
y <- absolut(-3)
y
help(runif)
runif(2)
numeric(6)
runif(2,3,4)
z<-numeric(7)
z
z[4]<-as.integer(runfi(1,6,10))
z[4]<-as.integer(runif(1,6,10))
z
z[6]<-as.integer(runif(1,6,10))
z
aleas <- function(n,li,ls){
rv <- numeric(n)
for (i in 1:n){
rv[i] <- as.integer(runif(1,min =li,max =ls))
}
return(rv)
}
aleas(n =5,li = 2,8)
aleas(ls=7,li=3,n=15)
aleas(n =5,li = 2,8)
aleas(5,2,8)
f <- function(i){
i = i + 1
return(i)
}
h <- function(i){
return(i+1)
}
g <- function(i){
h(i*5)
}
main <- function(){
i =7
j = k = l = 0
j = f(i)
k = f(j*3)
l = g(i)
print(i)
print(j)
print(k)
print(l)
}
main()##i,j,k,l
increment_first_inplace <- function(x){
x[1] <- x[1] + 1
return (x)
}
y <- c(2,3,2,4,3)
z <-increment_first_inplace(y)
z
